# This script is part of the tap CPrAN plugin for Praat.
# The latest version is available through CPrAN or at
# <http://cpran.net/plugins/tap>
#
# The tap plugin is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public
# License as published by the Free Software Foundation, either
# version 3 of the License, or (at your option) any later version.
#
# The tap plugin is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty
# of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with selection. If not, see <http://www.gnu.org/licenses/>.
#
# Copyright 2015-2016 Jose Joaquin Atria

#!
#! # A test suite for Praat with diagnostics
#!
#! Unlike the procedures in `simple.proc`, these procedure implement
#! testing interface for Praat modeled after the Test::More Perl module.
#! With it, diagnostics for failing tests can be obtained, making error
#! reports a bit more informative.
#!
#! If you already use the procedures in `simple.proc`, you can
#! change into using these procedures without changing your code at all.
#! You won't fully benefit from the procedures in this file, however,
#! until you do make those changes.
#!

if !variableExists("diag.prefix$")
  diag.prefix$ = "#   "
endif

#!
#! # Procedure overrides
#!

#! ~~~ params
#! in:
#!   .value: >
#!     A test value, interpreted as a boolean: `true` means success,
#!     `false` means failure.
#!   .name$: >
#!     The name of the test. A descriptive string with which to identify it.
#! out: Internally calls `@_testsimple_ok`
#! ~~~
#!
#! The basic exposed test procedure. Failing tests will also be marked with
#! an additional diagnostic line.
#!
procedure ok: .value, .name$
  @_start_test()

  @_testsimple_ok()

  .todo$ = if ok.todo then "(TODO) " else "" fi
  if !ok.value
    @diag: "Failed " + .todo$ + "test '" + .name$ + "'"
  endif

  @_end_test()
endproc

#! ~~~ params
#! out: Internally calls `@ok`.
#! ~~~
#!
#! Test whether objects created during testing have been removed. The check
#! is made by comparing the number of objects when the plan was specified
#! to the number of objects when the test was called. If they are different,
#! the test will fail.
#!
#! If the test fails, a list of the objects remaining in the list will be
#! printed, with their names and ID numbers.
#!
procedure ok_selection ()
  @_start_test()

  select all
  nocheck minusObject: plan.original
  @_testsimple_saveSelection: "final_selection"
  .current = '_testsimple_saveSelection.table'

  @ok: plan.original_number == Object_'.current'.nrow,
    ... "Removed all local objects"

  if !ok.value
    if plan.original_number > Object_'.current'.nrow
      @_ok_objectExists: plan.original
      if '_ok_objectExists.return'
        @diag: "  these original objects are missing:"
        for .i to Object_'plan.original'.nrow
          .oid = Object_'plan.original'[.i, "id"]
          .name$ = Object_'plan.original'$[.i, "id"] + ". " +
            ... Object_'plan.original'$[.i, "type"]  + " "  +
            ... Object_'plan.original'$[.i, "name"]

          @_ok_objectExists: .oid
          if !'_ok_objectExists.return'
            @diag: "  - " + .name$
          endif
        endfor
      else
        @diag: "  some original objects are missing"
      endif
    elsif plan.original_number < Object_'.current'.nrow
      @_testsimple_restoreSelection: .current
      @diag: "  these objects remain in the list:"

      @_ok_objectExists: plan.original
      if '_ok_objectExists.return'
        @_testsimple_minusSelection: plan.original
      endif

      for .i to numberOfSelected()
        @diag: "  - " + selected$(.i)
      endfor
    endif
  endif

  removeObject: .current

  @_end_test()
endproc

include ../../plugin_tap/procedures/simple.proc

#! ~~~ params
#! in:
#!   .got$: >
#!     The string to test
#!   .expected$: >
#!     The expected string
#!   .msg$: >
#!     The name of the test. A descriptive string with which to identify it.
#! ~~~
#!
#! Test passes if both strings are equal.
#!
procedure is$: .got$, .expected$, .msg$
  @_start_test()

  if .got$ == .expected$
    @pass: .msg$
  else
    @fail: .msg$
    if !ok.value
      @diag: "       got: """      + .got$ + """"
      @diag: "  expected: """ + .expected$ + """"
    endif
  endif

  @_end_test()
endproc

#! ~~~ params
#! in:
#!   .got: >
#!     The number to test
#!   .expected: >
#!     The expected number
#!   .msg$: >
#!     The name of the test. A descriptive string with which to identify it.
#! ~~~
#!
#! Test passes if both numbers are equal.
#!
procedure is: .got, .expected, .msg$
  @_start_test()

  if .got == .expected
    @pass: .msg$
  else
    @fail: .msg$
    if !ok.value
      @diag: "       got: " + string$(.got)
      @diag: "  expected: " + string$(.expected)
    endif
  endif

  @_end_test()
endproc

#! ~~~ params
#! in:
#!   .got$: >
#!     The string to test
#!   .expected$: >
#!     The expected string
#!   .msg$: >
#!     The name of the test. A descriptive string with which to identify it.
#! ~~~
#!
#! Test passes if both strings are different.
#!
procedure isnt$: .got$, .expected$, .msg$
  @_start_test()

  if .got$ != .expected$
    @pass: .msg$
  else
    @fail: .msg$
    if !ok.value
      @diag: "       got: """      + .got$ + """"
      @diag: "  expected: anything else"
    endif
  endif

  @_end_test()
endproc

#! ~~~ params
#! in:
#!   .got: >
#!     The number to test
#!   .expected: >
#!     The expected number
#!   .msg$: >
#!     The name of the test. A descriptive string with which to identify it.
#! ~~~
#!
#! Test passes if both numbers are different.
#!
procedure isnt: .got, .expected, .msg$
  @_start_test()

  if .got != .expected
    @pass: .msg$
  else
    @fail: .msg$
    if !ok.value
      @diag: "       got: " + string$(.got)
      @diag: "  expected: anything else"
    endif
  endif

  @_end_test()
endproc

#! ~~~ params
#! in:
#!   .got: >
#!     The number to test
#!   .msg$: >
#!     The name of the test. A descriptive string with which to identify it.
#! ~~~
#!
#! Test passes if number is truthy
#!
procedure is_true: .got, .msg$
  @_start_test()

  if .got
    @pass: .msg$
  else
    @fail: .msg$
    if !ok.value
      @diag: "       got: " + string$(.got)
      @diag: "  expected: a truthy value (non-zero)"
    endif
  endif

  @_end_test()
endproc

#! ~~~ params
#! in:
#!   .got: >
#!     The number to test
#!   .msg$: >
#!     The name of the test. A descriptive string with which to identify it.
#! ~~~
#!
#! Test passes if both numbers are different.
#!
procedure is_false: .got, .msg$
  @_start_test()

  if !.got
    @pass: .msg$
  else
    @fail: .msg$
    if !ok.value
      @diag: "       got: " + string$(.got)
      @diag: "  expected: a falsy value (zero)"
    endif
  endif

  @_end_test()
endproc

#! ~~~ params
#! in:
#!   .msg$: >
#!     A message to print
#! ~~~
#!
#! Prints a message in a way that doesn't interfere with the TAP output. The
#! passed message can be a multiline string.
#!
procedure diag: .msg$
  .msg$ = .prefix$ + .msg$
  .msg$ = replace_regex$(.msg$, newline$, newline$ + .prefix$, 0)
  appendInfoLine: .msg$
endproc

#! ~~~ params
#! in:
#!   .got$: >
#!     The string to test
#!   .pattern$: >
#!     A regular expression pattern to match against
#!   .msg$: >
#!     The name of the test. A descriptive string with which to identify it.
#! ~~~
#!
#! Test passes if the string matches the pattern.
#!
procedure like: .got$, .pattern$, .msg$
  @_start_test()

  if index_regex(.got$, .pattern$)
    @pass: .msg$
  else
    @fail: .msg$
    if !ok.value
      @diag: "                '" + .got$     + "'"
      @diag: "  doesn't match /" + .pattern$ + "/"
    endif
  endif

  @_end_test()
endproc

#! ~~~ params
#! in:
#!   .got$: >
#!     The string to test
#!   .pattern$: >
#!     A regular expression pattern to match against
#!   .msg$: >
#!     The name of the test. A descriptive string with which to identify it.
#! ~~~
#!
#! Test passes if the string does not match the pattern.
#!
procedure unlike: .got$, .pattern$, .msg$
  @_start_test()

  if !index_regex(.got$, .pattern$)
    @pass: .msg$
  else
    @fail: .msg$
    if !ok.value
      @diag: "                '" + .got$     + "'"
      @diag: "        matches /" + .pattern$ + "/"
    endif
  endif

  @_end_test()
endproc

#! ~~~ params
#! in:
#!   .got$: >
#!     The string to test
#!   .op$: >
#!     An operator to use for comparison, as a string
#!   .expected$: >
#!     The expected string
#!   .msg$: >
#!     The name of the test. A descriptive string with which to identify it.
#! ~~~
#!
#! Test passes if comparing both strings with the specified operator results
#! in a true value.
#!
procedure cmp_ok$: .got$, .op$, .expected$, .msg$
  @_start_test()

  if .got$ '.op$' .expected$
    @pass: .msg$
  else
    @fail: .msg$
    if !ok.value
      @diag: "  '" + .got$      + "'"
      @diag: "      " + .op$
      @diag: "  '" + .expected$ + "'"
    endif
  endif

  @_end_test()
endproc

#! ~~~ params
#! in:
#!   .got: >
#!     The number to test
#!   .op$: >
#!     An operator to use for comparison, as a string
#!   .expected: >
#!     The expected number
#!   .msg$: >
#!     The name of the test. A descriptive string with which to identify it.
#! ~~~
#!
#! Test passes if comparing both numbers with the specified operator results
#! in a true value.
#!
procedure cmp_ok: .got, .op$, .expected, .msg$
  @_start_test()

  if .got '.op$' .expected
    @pass: .msg$
  else
    @fail: .msg$
    if !ok.value
      @diag: "  '" + string$(.got)      + "'"
      @diag: "      " + .op$
      @diag: "  '" + string$(.expected) + "'"
    endif
  endif

  @_end_test()
endproc

#! ~~~ params
#! in:
#!   .id: >
#!     The ID of an object
#!   .msg$: >
#!     The name of the test. A descriptive string with which to identify it.
#! ~~~
#!
#! Test passes if the specified ID represents an object that exists in the
#! Object list.
#!
procedure ok_exists: .id, .msg$
  @_start_test()

  @_ok_objectExists: .id

  if '_ok_objectExists.return'
    @pass: .msg$
  else
    @fail: .msg$
    if !ok.value
      @diag: "  object '" + string$(.id) + "' doesn't exist"
    endif
  endif

  @_end_test()
endproc

#! ~~~ params
#! in:
#!   .id: >
#!     The ID of an object
#!   .msg$: >
#!     The name of the test. A descriptive string with which to identify it.
#! ~~~
#!
#! Test passes if the specified ID does not represent any object that exists in
#! the Object list.
#!
procedure no_object: .id, .msg$
  @_start_test()

  @_ok_objectExists: .id

  if !'_ok_objectExists.return'
    @pass: .msg$
  else
    @fail: .msg$
    if !ok.value
      @diag: "  object '" + string$(.id) + "' exists"
    endif
  endif

  @_end_test()
endproc

#! ~~~ params
#! in:
#!   .id: >
#!     The ID of an object
#!   .msg$: >
#!     The name of the test. A descriptive string with which to identify it.
#! ~~~
#!
#! Test passes if the specified ID represents a currently selected object.
#!
procedure ok_selected: .id, .msg$
  @_start_test()

  @_ok_objectExists: .id

  if '_ok_objectExists.return'
    @_ok_isSelected: .id
    if '_ok_isSelected.return'
      @pass: .msg$
    else
      @fail: .msg$
      if !ok.value
        @diag: "  object '" + string$(.id) + "' is not selected"
      endif
    endif
  else
    @ok_exists: 0, .msg$
  endif

  @_end_test()
endproc

#! ~~~ params
#! in:
#!   .id: >
#!     The ID of an object
#!   .msg$: >
#!     The name of the test. A descriptive string with which to identify it.
#! ~~~
#!
#! Test passes if the specified ID does not represent any currently selected
#! object.
#!
procedure ok_unselected: .id, .msg$
  @_start_test()

  @_ok_objectExists: .id

  if '_ok_objectExists.return'
    @_ok_isSelected: .id
    if !'_ok_isSelected.return'
      @pass: .msg$
    else
      @fail: .msg$
      if !ok.value
        @diag: "  object '" + string$(.id) + "' is selected"
      endif
    endif
  else
    @ok_exists: 0, .msg$
  endif

  @_end_test()
endproc

#! ~~~ params
#! in:
#!   .a: >
#!     The ID of an object
#!   .b: >
#!     The ID of another object
#!   .msg$: >
#!     The name of the test. A descriptive string with which to identify it.
#! ~~~
#!
#! Test passes if the objects represented by both IDs are identical.
#!
procedure is_deeply: .a, .b, .msg$
  @_start_test()

  .result = undefined

  .n = numberOfSelected()
  for .i to .n
    .id[.n] = selected(.i)
  endfor

  .adiag$ = string$(.a)
  .bdiag$ = string$(.b)

  @_ok_objectExists: .a
  if !'_ok_objectExists.return'
    .result = 0
    .aexists = 0
    .adiag$ = "'" + .adiag$ + "'"
  else
    selectObject: .a
    .aexists = 1
    .adiag$ = .adiag$ + ". " + selected$()
  endif

  @_ok_objectExists: .b
  if !'_ok_objectExists.return'
    .result = 0
    .bexists = 0
    .bdiag$ = "'" + .bdiag$ + "'"
  else
    selectObject: .b
    .bexists = 1
    .bdiag$ = .bdiag$ + ". " + selected$()
  endif

  if .result == undefined
    if objectsAreIdentical(.a, .b)
      @pass: .msg$
    else
      @fail: .msg$
      if !ok.value
        @diag: "      objects"
        @diag: "  " + .adiag$
        @diag: "      and"
        @diag: "  " + .bdiag$
        @diag: "      are not the same"
      endif
    endif
  else
    @fail: .msg$
    if !ok.value
      if !.aexists and !.bexists
        @diag: "      neither object"
        @diag: "  " + .adiag$
        @diag: "      nor object"
        @diag: "  " + .bdiag$
        @diag: "      exist"
      elsif .aexists
        @diag: "  " + .adiag$
        @diag: "      exists but"
        @diag: "  " + .bdiag$
        @diag: "      doesn't"
      else
        @diag: "  " + .adiag$
        @diag: "      doesn't exist but"
        @diag: "  " + .bdiag$
        @diag: "      does"
      endif
    endif
  endif

  nocheck selectObject: undefined
  for .i to .n
    plusObject: .id[.n]
  endfor

  @_end_test()
endproc

#! ~~~ params
#! in:
#!   .msg$: >
#!     The name of the test. A descriptive string with which to identify it.
#! ~~~
#!
#! Automatically pass a test with the specified message.
#!
procedure pass: .msg$
  @_start_test()
  @ok: 1, .msg$
  @_end_test()
endproc

#! ~~~ params
#! in:
#!   .msg$: >
#!     The name of the test. A descriptive string with which to identify it.
#! ~~~
#!
#! Automatically fail a test with the specified message.
#!
procedure fail: .msg$
  @_start_test()
  @ok: 0, .msg$
  @_end_test()
endproc

#! ~~~ params
#! in:
#!   .why$: >
#!     The reason to abort the test suite.
#! ~~~
#!
#! An alias for @bail_out, to more closely mimic the Test::More API.
#!
#! Abort all tests in case of some critical failure. Only argument is
#! the reason why the test suite is aborted.
#!
procedure BAIL_OUT: .why$
  @bail_out: .why$
endproc

#! ~~~ params
#! in:
#!   .id: >
#!     The ID of an object to test
#! out:
#!   .return: >
#!     The result of the test.
#! internal: true
#! ~~~
#!
#! Returns true if the object exists, false otherwise.
#!
#! Copied from "selection" plugin to limit dependencies
#!
procedure _ok_objectExists (.id)
  .start = numberOfSelected()
  nocheck plusObject: .id
  .plus = numberOfSelected()
  nocheck minusObject: .id
  .minus = numberOfSelected()

  if .plus = .minus
    # Object does not exist
    .return = 0
  else
    .return = 1
    if .start < .plus
      minusObject: .id
    else
      plusObject: .id
    endif
  endif
endproc

#! ~~~ params
#! in:
#!   .id: >
#!     The ID of an object to test
#! out:
#!   .return: >
#!     The result of the test.
#! internal: true
#! ~~~
#!
#! Returns true if the object is selected, false otherwise.
#!
#! Copied from "selection" plugin to limit dependencies
#!
procedure _ok_isSelected (.id)
  .n = numberOfSelected()
  .return = 0
  for .i to .n
    if selected(.i) == .id
      .return = 1
      .i += .n
    endif
  endfor
endproc
