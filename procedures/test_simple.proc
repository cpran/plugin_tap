# PLanning procedures
procedure plan: .total_tests
  if variableExists("plan.current_plan")
    exitScript: "Already running a test plan"
  endif

  if .total_tests != undefined
    appendInfoLine: "1..", .total_tests
  endif

  .current_plan = .total_tests
  .test = 0
  .skipping = 0
  .todo = 0
endproc

procedure no_plan ()
  @plan: undefined
endproc

procedure done_testing ()
  if !variableExists("plan.current_plan")
    exitScript: "No test plan"
  endif

  if plan.total_tests == undefined
    appendInfoLine: "1..", plan.test
  else
    if plan.test < plan.total_tests
      exitScript: "Incomplete test suite"
    endif
  endif
endproc

# Testing procedures
procedure ok: .value, .name$
  if !variableExists("plan.current_plan")
    exitScript: "No test plan"
  endif

  plan.test += 1

  if plan.skipping = undefined or plan.skipping
    plan.skipping -= 1
    .name$ = "# SKIP " + skip.why$
    .value = 1
  else
    if plan.todo
      plan.todo -= 1
      .name$ = .name$ + " # TODO " + todo.why$
    endif
  endif

  appendInfo: if .value then "" else "not " fi +
    ... "ok " + string$(plan.test)

  appendInfoLine: if .name$ != "" then " - " + .name$ else "" fi
endproc

procedure ok_formula: .formula$, .name$
  .value = Calculator: .formula$
  @ok(.value, .name$)
endproc

# SKIP procedures
procedure skip: .how_many, .why$
  plan.skipping = .how_many
endproc

procedure skip_all: .why$
  .keep_skipping = 1
  @skip(undefined, .why$)
endproc

procedure end_skip ()
  if !variableExists("skip_all.keep_skipping")
    plan.skipping = 0
  endif
endproc

# TODO procedures
procedure todo: .how_many, .why$
  plan.todo = if .how_many = undefined then -1 else .how_many fi
endproc

procedure end_todo ()
  plan.todo = 0
endproc

# Bail out
procedure bail_out: .why$
  appendInfoLine: "Bail out! ", .why$
  exitScript()
endproc
