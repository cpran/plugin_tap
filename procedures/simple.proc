# This script is part of the testsimple CPrAN plugin for Praat.
# The latest version is available through CPrAN or at
# <http://cpran.net/plugins/testsimple>
#
# The testsimple plugin is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public
# License as published by the Free Software Foundation, either
# version 3 of the License, or (at your option) any later version.
#
# The testsimple plugin is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty
# of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with selection. If not, see <http://www.gnu.org/licenses/>.
#
# Copyright 2015-2016 Jose Joaquin Atria

#!
#! # A simple test suite for Praat
#!
#! These procedure implement a simple testing interface for Praat
#! producing TAP output. The interface is closely modeled after that
#! in the Test::Simple Perl module.
#!
#! For a more sophisticated interface, with better diagnostics for
#! failing tests, see the `more.proc` file in this plugin.
#!

#!
#! # Planning procedures
#!

#! ~~~ params
#! in:
#!   .total_tests: >
#!     The total number of planned tests, or `undefined` if not known.
#! out:
#!   ok_selection.original: >
#!     The number of originally selected objects, for use in selection
#!     tests.
#!   .current_plan: >
#!     The current test plan.
#!   .test: >
#!     The indexed variable of the current test. Initialised here to `0`.
#!   .skip: >
#!     A boolean flag to save SKIP state. Initialised here to `false`.
#!   .todo: >
#!     A boolean flag to save TODO state. Initialised here to `false`.
#! ~~~
#!
#! Plan a test suite.
#!
procedure plan: .total_tests
  if variableExists("plan.current_plan")
    exitScript: "Already running a test plan"
  endif

  ok_selection.original = numberOfSelected()

  if .total_tests != undefined
    appendInfoLine: "1..", .total_tests
  endif

  .current_plan = .total_tests
  .test     = 0
  .skipping = 0
  .todo     = 0
endproc

#! ~~~ params
#! out: Internally calls `@plan`.
#! ~~~
#!
#! Explicitly declare an undefined number of tests. Printing of the plan
#! is deferred until `@done_testing` is called.
#!
procedure no_plan ()
  @plan: undefined
endproc

#! ~~~ params
#! ~~~
#!
#! Mark a plan as completed. If a plan has been defined (with `@plan`)
#! or explicitly marked as undefined (with `@no_plan`), the test suite is
#! complete. It is an error to complete a plan that does not exist.
#!
procedure done_testing ()
  if !variableExists("plan.current_plan")
    exitScript: "No test plan"
  endif

  if plan.total_tests == undefined
    appendInfoLine: "1..", plan.test
  else
    if plan.test < plan.total_tests
      exitScript: "Incomplete test suite"
    endif
  endif
endproc

#!
#! # Testing procedures
#!

#! ~~~ params
#! in:
#!   .value: >
#!     A test value, interpreted as a boolean: `true` means success,
#!     `false` means failure.
#!   .name$: >
#!     The name of the test. A descriptive string with which to identify it.
#! out: Internally calls `@_simple_ok`
#! ~~~
#!
#! The basic exposed test procedure.
#!
procedure ok: .value, .name$
  @_simple_ok()
endproc

#! ~~~ params
#! out:
#!   ok.skip: >
#!     Set to `true` if the test was skipped, `false` otherwise.
#!   ok.todo: >
#!     Set to `true` if the test was marked as TODO, `false` otherwise.
#!   ok.value: >
#!     The return value of the test.
#!   plan.test: >
#!     The index of the test. Each call to this procedure increments this
#!     variable.
#! ~~~
#!
#! The basic logic for the test procedure. Takes a boolean value and prints
#! a TAP-compliant result based on its value. The SKIP and TODO states are
#! read from `plan.skip` and `plan.todo` respectively, which are set in
#! `@skip`, `@skip_all`, and `@end_skip` for SKIP, and `@todo` and
#! `@end_todo` for TODO.
#!
procedure _simple_ok ()
  if !variableExists("plan.current_plan")
    exitScript: "No test plan"
  endif

  ok.skip = 0
  ok.todo = 0

  plan.test += 1

  if plan.skipping == undefined or plan.skipping
    plan.skipping -= 1
    ok.value = 1
    ok.skip = 1
  elsif plan.todo == undefined or plan.todo
    plan.todo -= 1
    ok.todo = 1
  endif

  if ok.value != undefined and ok.value
    appendInfo: "ok " + string$(plan.test)
  else
    appendInfo: "not ok " + string$(plan.test)
    ok.value = 0
  endif

  appendInfo: if ok.name$ != "" then " - " + ok.name$ else "" fi
  if ok.skip
    appendInfoLine: " # SKIP " + skip.why$
  elsif ok.todo
    appendInfoLine: " # TODO " + todo.why$
  else
    appendInfoLine: ""
    ok.todo$ = ""
  endif
endproc

#! ~~~ params
#! in:
#!   .formula$: >
#!     The formula to evaluate.
#!   .name$: >
#!     The name of the test.
#! out: Internally calls `@ok` with the result of the formula as its value.
#! ~~~
#!
#! Test a formula with `@ok`. The first argument is a string that will be
#! interpreted as a formula. Formulas that evaluates to `true` will pass,
#! and those that evaluate to `false` will fail.
#!
procedure ok_formula: .formula$, .name$
  if plan.skipping != undefined and !plan.skipping
    .value = Calculator: .formula$
  else
    .value = 1
  endif
  @ok(.value, .name$)
endproc

#! ~~~ params
#! out: Internally calls `@ok`.
#! ~~~
#!
#! Test whether objects created during testing have been removed. The check
#! is made by comparing the number of objects when the plan was specified
#! to the number of objects when the test was called. If they are different,
#! the test will fail.
#!
procedure ok_selection ()
  select all
  .current = numberOfSelected()
  .result = .current == .original

  @ok: .result, "Removed all local objects"
endproc

#!
#! # SKIP procedures
#!

#! ~~~ params
#! in:
#!   .how_many: >
#!     The number of tests to skip.
#!   .why$: >
#!     The reason to skip them.
#! out:
#!   plan.skip: >
#!     A counter of tests to skip.
#! ~~~
#!
#! Mark a number of tests as tests to skip. A skipped test is a success
#! regardless of the actual value of the test result.
#!
#! The first argument is the number of tests to skip. This number will be
#! decremented with every test (with every call to `@ok`). The test suite
#! will be in SKIP mode as long as this value is positive.
#!
#! Setting this value to `undefined` will mark all following tests as
#! skipped tests, until the next call to `@end_skip`.
#!
#! Second argument is the reason why they are skipped, which is printed next
#! to their name.
#!
procedure skip: .how_many, .why$
  plan.skip = .how_many
endproc

#! ~~~ params
#! in:
#!   .why$: >
#!     The reason to skip them.
#! out:
#!   .keep_skipping: >
#!     Set to `true`, making future calls to `@end_skip` useless
#! ~~~
#!
#! Mark **all** tests as skipped. Like calling `@skip` with an undefined
#! value, this procedure marks an indeterminate number of tests as skipped
#! tests. Unlike that method, however, this change is irreversible: all
#! following tests will be skipped until the end of the suite.
#!
#! Only argument is the reason why tests are being skipped, which is
#! printed next to their names.
#!
procedure skip_all: .why$
  .keep_skipping = 1
  @skip(undefined, .why$)
endproc

#! ~~~ params
#! out:
#!   plan.skip: >
#!     Set to `false` unless `@skip_all` has been called.
#! ~~~
#!
#! End a SKIP block. SKIP blocks are started by calling `@skip` with
#! an undefined number of tests to skip.
#!
procedure end_skip ()
  if !variableExists("skip_all.keep_skipping")
    plan.skip = 0
  endif
endproc

#!
#! # TODO procedures
#!

#! ~~~ params
#! in:
#!   .how_many: >
#!     The number of tests to mark as TODO.
#!   .why$: >
#!     The reason to mark them as such.
#! out:
#!   plan.todo: >
#!     A counter of TODO tests
#! ~~~
#!
#! Mark a number of tests as _to-do_ tests. A _to-do_ test can fail
#! without making the test suite a failure, but the actual value of the
#! test will still be recorded. Passing a _to-do_ test is considered a
#! bonus, and often reported by TAP consumers.
#!
#! The first argument is the number of tests to mark as _to-do_. This
#! number will be decremented with every test (with every call to `@ok`).
#! The test suite will be in TODO mode as long as this value is positive.
#!
#! Setting this value to `undefined` will mark all following tests as
#! _to-do_ tests, until the next call to `@end_todo`.
#!
#! Second argument is the reason why they are _to-do_, which is printed
#! next to their name.
#!
procedure todo: .how_many, .why$
  plan.todo = .how_many
endproc

#! ~~~ params
#! out:
#!   plan.todo: >
#!     Set to `false`.
#! ~~~
#!
#! End a TODO block. TODO blocks are started by calling `@todo` with
#! an undefined number of tests to mark as _to-do_.
#!
procedure end_todo ()
  plan.todo = 0
endproc

#! ~~~ params
#! in:
#!   .why$: >
#!     The reason to abort the test suite.
#! ~~~
#!
#! Abort all tests in case of some critical failure. Only argument is
#! the reason why the test suite is aborted.
#!
procedure bail_out: .why$
  appendInfoLine: "Bail out! ", .why$
  exitScript()
endproc
